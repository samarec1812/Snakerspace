openapi: 3.0.3
info:
  title: Snakerspace
  description: |-
    This is a sample Article App.
    Some useful links:
    - [The Snakerspace repository](https://github.com/samarec1812/Snakerspace)
    - [The source API definition for the Snakerspace](https://github.com/samarec1812/Snakerspace/blob/main/api/swagger.yaml)
#    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
#    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    url: https://github.com/samarec1812
    email: samarec1812@mail.ru
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
#externalDocs:
#  description: Find out more about Swagger
#  url: http://swagger.io
#servers:
#- url: https://petstore3.swagger.io/api/v3
tags:
- name: article
  description: Operations about article
  externalDocs:
    description: Find out more
    url: http://swagger.io
#- name: store
#  description: Access to Petstore orders
#  externalDocs:
#    description: Find out more about our store
#    url: http://swagger.io
#- name: user
#  description: Operations about user
paths:
  /note:
    get:
      tags:
        - article
      summary: Get all article
      description: Returns an all article
      operationId: getAllArticle
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/responses/ArticleArray'

        "400":
          description: Invalid ID supplied
        "404":
          description: Article not found
        "500":
          description: Server error
    post:
      tags:
      - article
      summary: Add a new article to the store
      description: Add a new article to the store
      operationId: addArticle
      requestBody:
        description: Create a new article in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNoteRequest'
#          application/xml:
#            schema:
#              $ref: '#/components/schemas/Pet'
#          application/x-www-form-urlencoded:
#            schema:
#              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
#            application/xml:
#              schema:
#                $ref: '#/components/schemas/Pet'
        "400":
          description: Invalid input

  /note/{id}:
    get:
      tags:
      - article
      summary: Find article by ID
      description: Returns a single article
      operationId: getArticleById
      parameters:
      - name: id
        in: path
        description: ID of article to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'

        "400":
          description: Invalid ID supplied
        "404":
          description: Article not found
        "500":
          description: Server error
    put:
      tags:
        - article
      summary: Update an existing article
      description: Update an existing article by Id
      operationId: updateArticle
      parameters:
        - name: id
          in: path
          description: ID of article to update
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent article in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNoteRequest'

        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'

        "400":
          description: Invalid ID supplied
        "404":
          description: Article not found
        "405":
          description: Validation exception
        "500":
          description: Server error


    delete:
      tags:
      - article
      summary: Deletes an article
      description: delete an article
      operationId: deleteArticle
      parameters:
      - name: id
        in: path
        description: Article id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Success
        "400":
          description: Invalid article value

components:
  schemas:
    CreateNoteRequest:
      type: object
      properties:
        text:
          type: string
          description: body article
          example: body article
    UpdateNoteRequest:
      type: object
      properties:
        text:
          type: string
          description: new body article
          example: new body article

    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        text:
          type: string
          example: fehguy
        created_at:
          type: string
        update_at:
          type: string
  responses:
    ArticleArray:
      description: List of article object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Article'

  requestBodies:
    Article:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Article'
        application/xml:
          schema:
            $ref: '#/components/schemas/Article'
#  securitySchemes:
#    petstore_auth:
#      type: oauth2
#      flows:
#        implicit:
#          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
#          scopes:
#            write:pets: modify pets in your account
#            read:pets: read your pets
#    api_key:
#      type: apiKey
#      name: api_key
#      in: header
